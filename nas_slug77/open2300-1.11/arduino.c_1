#define DEBUG 1  // wu2300 stops writing to standard out if setting this to 0 #define GUST  1  // report wind gust information (resets wind min/max)
//#include "win2300.h"
//#include <string.h>
//#include <fcntl.h>
#include <stdio.h>
//#include <time.h>
//#include <stdlib.h>
//#include <stdbool.h>
//#include <math.h>
//#include <sys/types.h>
//#include <sys/stat.h>
//#define _Bool   bool
//#define bool    _Bool
//#define false   0
//#define true    1
#define VERSION ".1w"
void print_usage(void)
{      printf("\n");      printf("tempCalc - Read and interpret data\n");      printf("arg1 filepath name.\n");      printf("arg2 datestamp to search for  12:00: \n");      printf("arg3 tag that has value [K0] \n");      printf("arg4 totals 0/1 (off/on) \n");      printf("\n");      exit(0);}int main(int argc, char *argv[]){      FILE *fileptr;      char str[3000];      //char strdate[11];       if (argc < 2 ) //|| argc > 3)      {            print_usage();      }      /* Get log filename. */      fileptr = fopen(argv[1], "r");      if (fileptr == NULL)      {            printf("Cannot open file %s\n",argv[1]);            exit(-1);      }      {            // 00:00:            char *timestr = argv[2];            //[K0]            char *searchTag = argv[3];            //0 off 1 on            char *totalsFlag = argv[4];            char *foundPos;            long total = 0;            long rtnValue;            long lastValue = 0;            //long rtnValuePeroid;            //long curValue;            //int foundPeriod;            while(! feof(fileptr))            {                  fscanf(fileptr, "\n%[^\n]", str);                  foundPos = strstr(str,timestr);                  if (foundPos)                  {                        //find date 2011-05-08                        foundPos = strstr(str,"-");                        if (foundPos)                        {                              //print date                              printf("%.*s", 12, foundPos - 4);                              //find Tag i.e. [K0]							foundPos = strstr(str,searchTag);                             if (foundPos)                              {                                    //skip over or start after tag sizeof [K0] = 4                                    foundPos += sizeof(searchTag);                                    rtnValue = 0;                                    //rtnValuePeroid = 0;                                    //foundPeriod = 0;                                    //only want numbers everything else is the end...                                    //strip off leading zeros "00012"                                    while((foundPos[0] >= '0' && foundPos[0] <= '9') )                                     {                                          rtnValue = rtnValue * 10 + foundPos[0] - '0';                                          foundPos++;                                    }                                    //try and set first value offsets                                    if (total == 0 && lastValue == 0)                                    {                                          total = -1 * rtnValue;                                          lastValue = rtnValue;                                    }                                  //check if we want totals shown                                    if (totalsFlag[0] == '1')                                    {                                          if (lastValue < rtnValue)                                                    total += rtnValue - lastValue;                                          else                                                total += rtnValue;                                          printf("%i %i \n",rtnValue - lastValue,total);                                    }                                    else                                          printf("%i\n",rtnValue - lastValue);                                    lastValue = rtnValue;                              }                        }                  }            }      }      fclose(fileptr);return(0);}